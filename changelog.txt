Change 1:
	while (game.Begin())
	{

	}

	Reduced coupling. The game is supposed to repeat, so it repeats itself rather than having the caller do the repeating.

	game.Begin();

Change 2:
	class State
    {
        public int topRow;
        public int midRow;
        public int botRow;
        public int num;
        public float sum;
        public State(int top, int mid, int bot, float val)
        {
            topRow = top;
            midRow = mid;
            botRow = bot;
            num = 1;
            sum = val;
        }
    }
	
	Slightly improved encapsulation. Extracted addition of instance to State from caller. Simplified constructor, so it doesn't necessitate magic values from the calling code.
	
	class State
    {
        private int topRow;
        private int midRow;
        private int botRow;
        private int num;
        private float sum;
        public State(int top, int mid, int bot)
        {
            topRow = top;
            midRow = mid;
            botRow = bot;
            num = 0;
        }
        public void addInstance(float value){
            num++;
            sum += value;
        }
    }
	
Change 3:
	Class State:
		class State
		{
			private int topRow;
			private int midRow;
			private int botRow;
			private int num;
			private float sum;
			public State(int top, int mid, int bot)
			{
				topRow = top;
				midRow = mid;
				botRow = bot;
				num = 0;
			}
			public void addInstance(float value){
				num++;
				sum += value;
			}
		}
		
		Encapsulated fields.
		Moved weight calculation to State, therefore removing some coupling.
		
		class State
		{
			private int topRow;
			private int midRow;
			private int botRow;
			private int num;
			private float sum;

			public State(int top, int mid, int bot){
				topRow = top;
				midRow = mid;
				botRow = bot;
				num = 0;
			}

			public void addInstance(float value){
				num++;
				sum += value;
			}

			public int TopRow{
				get { return topRow; }
			}
			public int MidRow{
				get { return midRow; }
			}
			public int BotRow{
				get { return botRow; }
			}
			public float getWeight(){
				return sum / (float)num;
			}
		}
	Class GameManager:
		public List<State> stateHistory;
		
		private void makeStates()
		{
		
		public bool isGameOver()
		
		 else if (stateHistory[i].sum / stateHistory[i].num <= stateHistory[bestMove].sum / stateHistory[bestMove].num)
		 
		 Renamed a lot of Mnemonics to make more sense. Originally, we had a history of found states, but then switched to a list of all possible states. Renamed stuff to comply. Fixed bunches of things to comply with changes in State.
		 
		 public List<State> stateList;
		 
		 private void initStateList(){
		 
		 public bool gameIsOver()
		 
		 else if (stateList[i].getWeight() <= stateList[bestMove].getWeight())
		 
Change 4:
	class CurrentGame
	{
		public List<int> topRow;
		public List<int> midRow;
		public List<int> botRow;
		public int totalStates;
		public List<float> values;

		public CurrentGame()
		{
			topRow = new List<int>();
			midRow = new List<int>();
			botRow = new List<int>();
			values = new List<float>();
		}
		public void addState(int top, int mid, int bot)
		{
			topRow.Add(top);
			midRow.Add(mid);
			botRow.Add(bot);
			totalStates++;
		}
		public void calcValues()
		{
			for (int i = 0; i < totalStates; i++)
			{
				if ((i - totalStates) % 2 == 0)
				{
					float value = -((totalStates - (totalStates - i) % 2)) / (float)totalStates;
					values.Add(value);
				}
				else
				{
					float value = ((totalStates - (totalStates - i) % 2)) / (float)totalStates;
					values.Add(value);
				}
			}
		}
	}
	
	Encapsulated fields. Moved the calcValues call to the values getter, so users of CurrentGame don't need to call calcValues themselves, therefore removing more coupling. Also fixed GameManager to reflect such changes.
	
	class CurrentGame
    {
        private List<int> topRow;
        private List<int> midRow;
        private List<int> botRow;
        private int totalStates;
        private List<float> values;

        public CurrentGame(){
            topRow = new List<int>();
            midRow = new List<int>();
            botRow = new List<int>();
        }

        public void addState(int top, int mid, int bot){
            topRow.Add(top);
            midRow.Add(mid);
            botRow.Add(bot);
            totalStates++;
        }

        private void calcValues(){
            values = new List<float>();
            for (int i = 0; i < totalStates; i++){
                if ((i - totalStates) % 2 == 0){
                    float value = -((totalStates - (totalStates - i) % 2)) / (float)totalStates;
                    values.Add(value);
                }else{
                    float value = ((totalStates - (totalStates - i) % 2)) / (float)totalStates;
                    values.Add(value);
                }
            }
        }

        public List<int> TopRow{
            get { return topRow; }
        }

        public List<int> MidRow{
            get { return midRow; }
        }

        public List<int> BotRow{
            get { return botRow; }
        }

        public int TotalStates{
            get { return totalStates; }
        }

        public List<float> Values{
            get {
                if (values.Count < topRow.Count){
                    calcValues();
                }
                return values; 
            }
        }
    }
	
Change 5:
	Extracted classes for Players, known as HumanPlayer and ComputerPlayer. 